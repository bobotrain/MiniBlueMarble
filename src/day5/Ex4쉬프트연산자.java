package day5;

public class Ex4쉬프트연산자 {
public static void main(String[] args) {
	
	int a=1, b=2, c=3;
	int x= a+b - (b/2) +c; //5
	int y = a + (b-2) / (2+c); // 연산자의 우선순위  이해하면 1 나오는 것 확인 가능
	System.out.println("x = " + x + ", y = " + y);
	System.out.println("--------------------------------------------");
	
	//고급1 : 쉬프트 연산자(shift연산자) "<<" --> 비트연산자의 일종 // 2진수
	//0011  = 3
	//0110  = 6 로 한칸씩 왼쪽으로 당겨짐 ( 맨 앞 값은 버려지고 맨 마지막 빈 칸은 0으로 채워짐 ) 
	//1100  = 12  다시 왼쪽으로 한칸씩 이동
	
	// 우리는 왼쪽으로 한칸씩 옮겨질 때 마다 값이 2배로 증가하는 것을 알 수 있음.
	int n = 0b0011; // 3 = 00000000 00000000 00000000 00000011
	n= n << 1; // "<<1" --> 왼쪽으로 1비트씩 이동! -> 0110 되므로 6 됨을 알 수 있다.
	System.out.println(n);//6
	System.out.println("----------------------------------");
	
	//고급2 : ">>" // 오른쪽으로 1칸씩 이동하는데 빈 칸은 MSB로 채운다
	//1000 0000 (MSB:맨 왼쪽에 있는 비트)= -128 임 -> int로 하면 00000000 00000000 00000000 00000000단위로 나오니까 오류가 나옴, byte로 해서 0000 0000단위로 하기주의
	byte k = (byte)0b10000000;  // 강제형변환
	k = (byte)(k>>1); // => >>1은 오른쪽으로 1비트씩 이동 / 빈 자리는 MSB(1)로 채움 => 11000000 = 64 된다...
	System.out.println(k);
	System.out.println("----------------------");
	
	//16진수 쉬프트연산자
	int s = 0x00000008; //16진수는 두 자리가 1바이트! => 이진수로 표현 =  00000000 00000000 00000000 00001000 = 8
	s = s>>1; // = 00000000 00000000 00000000 000000100 = 4 ( 8의 1/2배 값이 나옴을 알 수 있음)

    int t = 0xffffff80; // = 11111111 11111111 11111111 10000000 : -128 (2의 보수화 시켜서 -128나온 것 이해)
    t = t>>1; // => 빈 자리를 MSB(=1)로 채움 => 11111111 11111111 11111111 11000000 =>-64가 된다.  ( -128의 1/2배 나옴을 알 수 있음 ) 
    System.out.println(t);
    System.out.println("--------------------------------");
    
    // 고급3 ">>>" -> 오른쪽으로 1칸씩 이동하는데 빈칸은 MSB가 아닌 0으로 채운다 ( 고급응용 )
    t= t >>> 1; // >>>은 빈 자리를 0으로 채움 -> 01111111 11111111 11111111 11100000 : 2147483616 (MSB가 0이므로 2의 보수화 안되기에 이 수가 나옴을 이해하기)
    System.out.println(t);
    
    
}
}
